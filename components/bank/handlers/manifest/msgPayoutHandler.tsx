import { MintIcon } from '@/components/icons/MintIcon';
import { createSenderReceiverHandler } from '../createSenderReceiverHandler';
import { registerHandler } from '@/components/bank/handlers/handlerRegistry';
import { MsgPayout } from '@liftedinit/manifestjs/dist/codegen/liftedinit/manifest/v1/tx';
import { TruncatedAddressWithCopy } from '@/components/react/addressCopy';
import { format } from 'react-string-format';
import { MetadataSDKType } from '@liftedinit/manifestjs/dist/codegen/cosmos/bank/v1beta1/bank';
import BigNumber from 'bignumber.js';
import { formatAmount, formatDenom, formatDenomWithBadge, formatLargeNumber } from '@/utils';
import { Coin } from '@liftedinit/manifestjs/dist/codegen';

// The PayoutPair code generated by Telescope is wrong
interface Pair {
  address: string;
  coin: Coin;
}

const createSendMessage = (
  template: string,
  pairs: Pair[],
  color: string,
  metadata?: MetadataSDKType[]
) => {
  const sum = pairs.reduce((acc, pair) => acc.plus(pair.coin.amount), new BigNumber(0));
  const denom = formatDenom(pairs?.[0]?.coin?.denom); // We can only mint umfx anyway
  const formattedDenom = formatDenomWithBadge(pairs?.[0]?.coin?.denom); // We can only mint umfx anyway
  const coloredAmount = (
    <span className={`text-${color}-500`}>
      {formatLargeNumber(formatAmount(sum.toFixed(), denom, metadata))} {formattedDenom}
    </span>
  );
  const recipient =
    pairs.length > 1 ? (
      `distributed across ${pairs.length} addresses`
    ) : pairs?.[0]?.address ? (
      <>
        to <TruncatedAddressWithCopy address={pairs[0].address} />{' '}
      </>
    ) : (
      'an unknown address'
    );
  const message = format(template, coloredAmount, recipient);
  return <span className="flex gap-1">{message}</span>;
};

const createReceiveMessage = (
  template: string,
  pairs: Pair[],
  color: string,
  address: string,
  metadata?: MetadataSDKType[],
  sender?: string
) => {
  const sum = pairs.reduce((acc, pair) => {
    return pair.address === address ? acc.plus(pair.coin.amount) : acc;
  }, new BigNumber(0));
  const denom = formatDenom(pairs?.[0]?.coin?.denom); // We can only mint umfx anyway
  const formattedDenom = formatDenomWithBadge(pairs?.[0]?.coin?.denom); // We can only mint umfx anyway
  const coloredAmount = (
    <span className={`text-${color}-500`}>
      {formatLargeNumber(formatAmount(sum.toFixed(), denom, metadata))} {formattedDenom}
    </span>
  );
  const message = format(
    template,
    coloredAmount,
    sender ? <TruncatedAddressWithCopy address={sender} /> : 'an unknown address'
  );
  return <span className="flex gap-1">{message}</span>;
};

export const MsgPayoutHandler = createSenderReceiverHandler({
  iconSender: MintIcon,
  successSender: (tx, _, metadata) => {
    return createSendMessage('You minted {0} {1}', tx.metadata?.payoutPairs, 'green', metadata);
  },
  failSender: (tx, _, metadata) => {
    return createSendMessage(
      'You failed to mint {0} {1}',
      tx.metadata?.payoutPairs,
      'red',
      metadata
    );
  },
  successReceiver: (tx, address, metadata) => {
    return createReceiveMessage(
      'You were minted {0} from {1}',
      tx.metadata?.payoutPairs,
      'green',
      address,
      metadata,
      tx.sender
    );
  },
});

registerHandler(MsgPayout.typeUrl, MsgPayoutHandler);
