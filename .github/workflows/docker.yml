name: Docker (GHCR)

on:
  push:
    branches:
      - main
    tags:
      - '*'

concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [qa, testnet, mainnet]
    environment: ${{ matrix.environment }}
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # works if org allows Actions to publish packages

      - name: Set IMAGE env
        run: echo "IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/yaci" >> "$GITHUB_ENV"

      - name: Create .env file
        run: |
          touch .env
          echo "NEXT_PUBLIC_CHAIN=${{ vars.NEXT_PUBLIC_CHAIN }}" >> .env
          echo "NEXT_PUBLIC_CHAIN_ID=${{ vars.NEXT_PUBLIC_CHAIN_ID }}" >> .env
          echo "NEXT_PUBLIC_CHAIN_TIER=${{ vars.NEXT_PUBLIC_CHAIN_TIER }}" >> .env
          echo "NEXT_PUBLIC_RPC_URL=${{ vars.NEXT_PUBLIC_RPC_URL }}" >> .env
          echo "NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }}" >> .env
          echo "NEXT_PUBLIC_WALLETCONNECT_KEY=${{ secrets.NEXT_PUBLIC_WALLETCONNECT_KEY }}" >> .env
          echo "NEXT_PUBLIC_WEB3AUTH_NETWORK=${{ vars.NEXT_PUBLIC_WEB3AUTH_NETWORK }}" >> .env
          echo "NEXT_PUBLIC_WEB3AUTH_CLIENT_ID=${{ secrets.NEXT_PUBLIC_WEB3AUTH_CLIENT_ID }}" >> .env
          echo "NEXT_PUBLIC_EXPLORER_URL=${{ vars.NEXT_PUBLIC_EXPLORER_URL }}" >> .env
          echo "NEXT_PUBLIC_INDEXER_URL=${{ vars.NEXT_PUBLIC_INDEXER_URL }}" >> .env
          echo "NEXT_PUBLIC_OSMOSIS_CHAIN=${{ vars.NEXT_PUBLIC_OSMOSIS_CHAIN }}" >> .env
          echo "NEXT_PUBLIC_OSMOSIS_CHAIN_ID=${{ vars.NEXT_PUBLIC_OSMOSIS_CHAIN_ID }}" >> .env
          echo "NEXT_PUBLIC_OSMOSIS_RPC_URL=${{ vars.NEXT_PUBLIC_OSMOSIS_RPC_URL }}" >> .env
          echo "NEXT_PUBLIC_OSMOSIS_API_URL=${{ vars.NEXT_PUBLIC_OSMOSIS_API_URL }}" >> .env
          echo "NEXT_PUBLIC_OSMOSIS_EXPLORER_URL=${{ vars.NEXT_PUBLIC_OSMOSIS_EXPLORER_URL }}" >> .env
          echo "NEXT_PUBLIC_LEAP_DEEPLINK=${{ vars.NEXT_PUBLIC_LEAP_DEEPLINK }}" >> .env
          cat .env
          
      - name: Extract metadata (release tag)
        id: meta_tag
        if: matrix.environment == 'mainnet' && startsWith(github.ref, 'refs/tags/')
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE }}
          flavor: |
            latest=false
          tags: |
            type=ref,event=tag   # yields the raw tag (e.g., v1.2.3)

      - name: Build & push (release tag)
        id: build_tag
        if: matrix.environment == 'mainnet' && startsWith(github.ref, 'refs/tags/')
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta_tag.outputs.tags }}
          labels: ${{ steps.meta_tag.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: mode=max
          sbom: true

      - name: Show digest (release)
        if: steps.build_tag.outcome == 'success'
        run: |
          echo "Digest is: ${{ steps.build_tag.outputs.digest }}"

      - name: Generate artifact attestation (release)
        if: steps.build_tag.outcome == 'success'
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.IMAGE }}
          subject-digest: ${{ steps.build_tag.outputs.digest }}
          push-to-registry: true

      # ===== Push to main â†’ build for each env, tag with env name =====
      - name: Extract metadata (env tag)
        id: meta_env
        if: github.ref == 'refs/heads/main'
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE }}
          flavor: |
            latest=false
          tags: |
            type=raw,value=${{ matrix.environment }}

      - name: Build & push (env tag)
        id: build_env
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta_env.outputs.tags }}
          labels: ${{ steps.meta_env.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: mode=max
          sbom: true

      - name: Show digest (env)
        if: steps.build_env.outcome == 'success'
        run: |
          echo "Digest is: ${{ steps.build_env.outputs.digest }}"

      - name: Generate artifact attestation (env)
        if: steps.build_env.outcome == 'success'
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.IMAGE }}
          subject-digest: ${{ steps.build_env.outputs.digest }}
          push-to-registry: true
